import boto3
import json
import csv
from datetime import datetime
from botocore.exceptions import ClientError

# Configuration
TAG_KEY = 'Name' #replace with your desired tag key
S3_BUCKET = 'sagemaker-examples-ip-exhaustion' #replace with your s3 bucket name 
S3_REPORT_PATH = 'reports/non_compliant_resources.csv' #replace with your key for the report object generated by this script on S3

# Initialize AWS clients
resourcegroupstaggingapi = boto3.client('resourcegroupstaggingapi')
s3 = boto3.client('s3')


def get_all_resources():
    resources = []
    paginator = resourcegroupstaggingapi.get_paginator('get_resources')
    for page in paginator.paginate():
        for resource in page['ResourceTagMappingList']:
            resources.append(resource)
    return resources

def get_resources_without_tag(resources):
    non_compliant_resources = []
    for resource in resources:
        tags = {tag['Key']: tag['Value'] for tag in resource.get('Tags', [])}
        if TAG_KEY not in tags:
            non_compliant_resources.append({
                'ResourceARN': resource['ResourceARN'],
                'Tags': tags
            })
    return non_compliant_resources

def generate_report(non_compliant_resources):
    report_filename = f"non_compliant_resources_{datetime.now().strftime('%Y%m%d_%H%M%S')}.csv"
    with open(report_filename, 'w', newline='') as file:
        writer = csv.writer(file)
        writer.writerow(['ResourceARN', 'Tags'])
        for resource in non_compliant_resources:
            tags = json.dumps(resource['Tags'])
            writer.writerow([resource['ResourceARN'], tags])
    return report_filename

def upload_to_s3(file_path):
    s3.upload_file(file_path, S3_BUCKET, S3_REPORT_PATH)
    print(f"Report uploaded to S3 bucket {S3_BUCKET} at path {S3_REPORT_PATH}")

def main():
    print("Fetching all AWS resources...")
    resources = get_all_resources()
    print(f"Total resources fetched: {len(resources)}")

    print("Identifying resources without the tag...")
    non_compliant_resources = get_resources_without_tag(resources)
    print(f"Non-compliant resources found: {len(non_compliant_resources)}")

    if non_compliant_resources:
        print("Generating report...")
        report_file = generate_report(non_compliant_resources)
        print(f"Report generated: {report_file}")

        print("Uploading report to S3...")
        upload_to_s3(report_file)
    else:
        print("No non-compliant resources found.")

if __name__ == "__main__":
    main()
